%matplotlib inline
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
sperm = pd.read_csv("NewData.csv") #Sperm  dataset
sperm.head()
sperm=sperm.dropna()

print(sperm.shape)
sperm.head()

features,labels=sperm.loc[:,['Age','Year','Volume','Concentration']],sperm.loc[:,['MorphologyCount','MotilityCount','FPCount','pH']]
print(features.head())
labels.head()

from sklearn.model_selection import KFold
kfold=KFold(n_splits=10, random_state=42, shuffle=True)

from sklearn.ensemble import RandomForestRegressor
regressor = RandomForestRegressor(n_estimators=100, random_state=42)

from sklearn.model_selection import cross_val_score
scores = cross_val_score(estimator=regressor, X=features, y=labels, cv=kfold, n_jobs=4)
print(scores)

print(scores.mean())

from sklearn.linear_model import LinearRegression
#reg = LinearRegression().fit(X_train, y_train)
reg = LinearRegression()

from sklearn.model_selection import cross_val_score
scores = cross_val_score(estimator=reg, X=features, y=labels, cv=kfold, n_jobs=4)
print(scores)

print(scores.mean())

from sklearn.multioutput import MultiOutputRegressor
from sklearn.svm import SVR
svr = SVR(kernel='rbf',epsilon=0.2)
mor = MultiOutputRegressor(svr)

from sklearn.model_selection import cross_val_score
scores = cross_val_score(estimator=mor, X=features, y=labels, cv=kfold, n_jobs=4)
print(scores)

print(scores.mean())


from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(features, labels, shuffle=True, test_size=.2, random_state=42)
print(X_train.shape)
print(X_test.shape)
print(y_train.shape)
print(y_test.shape)
y_test.head()


print(X_train.shape)
print(X_test.shape)
print(y_train.shape)
print(y_test.shape)

regressor.fit(X_train,y_train)

Y_pred=regressor.predict(X_test)

print(y_test.iloc[:,0])

plt.scatter(Y_pred[:,1],
               y_test.iloc[:,1],
               color="g")
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Motility')
p1 = max(max(Y_pred[:,1]), max(y_test.iloc[:,1]))
p2 = min(min(Y_pred[:,1]), min(y_test.iloc[:,1]))
plt.plot([p1, p2], [p1, p2], 'b-')

print(min(Y_pred[:,0]))

